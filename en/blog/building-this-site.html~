<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2024-04-29 Mon 06:07 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Building this Site</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Richard Davis" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<link href="/styles/org.css" rel="stylesheet" />
<link href="/styles/style.css" rel="stylesheet" />
<link href="https://fonts.googleapis.com/css?family=JetBrains+Mono&?family=Open+Sans" rel="stylesheet" />
<link rel="alternate" type="application/rss+xml" title="Blog RSS Feed" href="/en/blog/rss.xml">
<link rel="icon" type="image/x-icon" href="/images/favicon.ico">
<script type="text/javascript" src="https://payhip.com/payhip.js"></script>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<h1 class="title">Building this Site
<br />
<span class="subtitle">Richard Davis, Blog</span>
</h1>
<div class="org-center">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left"><a href="../index.html">Home</a></td>
<td class="org-left"><a href="../about.html">About</a></td>
<td class="org-left"><a href="../events.html">Events</a></td>
<td class="org-left"><a href="../listening.html">Listening</a></td>
<td class="org-left"><a href="index.html">Blog</a></td>
<td class="org-left"><a href="../../fr/index.html">FR</a></td>
</tr>
</tbody>
</table>
</div>

<p>
Salutations!
</p>

<p>
I'm a nerd.
One of the things I'm a nerd about is Emacs, the extensible text editor.
Emacs does basically everything for me: I can listen to music, browse the web, read and send email, chat over multiple protocols, read and write PDF documents, etc.
(Notice that I didn't even explicitly mention writing text!)
One new thing that I have made Emacs do for me is build this website.
This proved harder than I expected, so I'll share some takeaways from the process.
</p>

<div id="outline-container-org92b2793" class="outline-2">
<h2 id="org92b2793">Hosting</h2>
<div class="outline-text-2" id="text-org92b2793">
<p>
This is pretty easy; I just use <a href="https://pages.github.com/">GitHub Pages</a>.
This also takes care of building the website via a <a href="https://docs.github.com/en/actions">GitHub Action</a> that installs Emacs, builds the site, and publishes its content to GitHub Pages.
And though not technically necessary, I bought a domain and set it up as directed <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">here</a>.
</p>

<p>
This part of the process is practically effortless, and I can recommend it to anyone looking to build a static site like this one.
I may someday want to migrate to a freer option like <a href="https://sr.ht/">sr.ht</a> or <a href="https://codeberg.org/">Codeberg</a> but that can wait until I have the money, time, and energy to do so.
</p>
</div>
</div>

<div id="outline-container-orge3a44c4" class="outline-2">
<h2 id="orge3a44c4">Building the site</h2>
<div class="outline-text-2" id="text-orge3a44c4">
<p>
The build process that GitHub Actions runs to build the site's HTML files is the publishing feature of <a href="https://orgmode.org/">Org Mode</a>, the incredibly powerful outlining tool/organizer/document builder etc. for Emacs.
This feature transforms files into other formats according user-defined project settings.
I am of course not the first to do this; my work draws on or steals from many who have done similar things before me.
My primary source was David Wilson of SystemCrafters fame, who has two excellent tutorials on <a href="https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/">building sites with Org Mode</a> and <a href="https://systemcrafters.net/publishing-websites-with-org-mode/automated-site-publishing/">automated publishing with GitHub Pages</a>.
</p>

<p>
As there are already excellent sources on these topics, I will summarize briefly and only comment on when I feel I do something differently or have something to offer.
</p>
</div>
</div>

<div id="outline-container-org5f8303a" class="outline-2">
<h2 id="org5f8303a">Setupfile</h2>
<div class="outline-text-2" id="text-org5f8303a">
<p>
One thing I do (due to my lack of knowledge of HTML and CSS) is that I use a <code>setupfile</code> to provide nice HTML and CSS theming that I couldn't otherwise do myself.
At the moment I'm using the ReadTheOrg theme (a ReadTheDocs clone) from the wonderful <a href="https://github.com/fniessen/org-html-themes"><code>org-html-themes</code></a> project.
These can be added to your project with a <code>#+SETUPFILE:</code> directive in all Org Mode files, like so:
</p>

<div class="org-src-container">
<pre class="src src-org"><span class="org-org-meta-line">#+SETUPFILE: <a href="https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup">https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup</a></span>
</pre>
</div>

<p>
However, I require a few more settings, so I don't directly; I instead wrap this directive in my own <code>setupfile</code> which I then use in the org files for the website.
I override or add some HTML settings and define the <code>yt</code> macro to embed videos.
The <code>setupfile</code> looks something like this:
</p>
<div class="org-src-container">
<pre class="src src-org"><span class="org-comment"># include the original setupfile</span>
<span class="org-org-meta-line">#+SETUPFILE: <a href="https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup">https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup</a></span>

<span class="org-comment"># my settings</span>
<span class="org-org-meta-line">#+HTML_HEAD: &lt;link rel="icon" type="image/x-icon" href="/images/favicon.ico"&gt;</span>
<span class="org-org-meta-line">#+HTML_HEAD: &lt;script type="text/javascript" src="<a href="https://payhip.com/payhip.js">https://payhip.com/payhip.js</a>"&gt;&lt;/script&gt;</span>

<span class="org-org-meta-line">#+MACRO: yt (eval (concat "#+begin_export html\n" "&lt;div class=\"video\"&gt;" "  &lt;iframe src=\"<a href="https://www.youtube-nocookie.com/embed/">https://www.youtube-nocookie.com/embed/</a>" $1 "\" allowfullscreen&gt;&lt;/iframe&gt;" "&lt;/div&gt;\n" "#+end_export"))</span>

<span class="org-org-meta-line">#+HTML_HEAD: &lt;style&gt; #content{max-width:1800px;}&lt;/style&gt;</span>
<span class="org-org-meta-line">#+HTML_HEAD: &lt;style&gt; p{max-width:800px;}&lt;/style&gt;</span>
<span class="org-org-meta-line">#+HTML_HEAD: &lt;style&gt; li{max-width:800px;}&lt;/style</span>
</pre>
</div>
<p>
I refer to the setupfile from within org files like so:
</p>
<div class="org-src-container">
<pre class="src src-org"><span class="org-org-meta-line">#+SETUPFILE: ../path/to/my/theme-readtheorg.setup</span>
</pre>
</div>

<p>
In order to allow downloading the remote setupfile, in the publish script, I must include it in the variable <code>org-safe-remote-resources</code>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span class="org-keyword">setq</span> org-safe-remote-resources
      '(<span class="org-string">"\\`</span><span class="org-string"><span class="org-constant">https://fniessen\\.github\\.io/org-html-themes/org/theme-readtheorg\\.setup\\</span></span><span class="org-string">'"</span>))
</pre>
</div>
</div>
</div>

<div id="outline-container-orgfcf581d" class="outline-2">
<h2 id="orgfcf581d">Blog</h2>
<div class="outline-text-2" id="text-orgfcf581d">
<p>
The hardest part of this site was setting up the blog the way I wanted it.
I relied a lot on <a href="https://writepermission.com/org-blogging-rss-feed.html">this wonderful article</a> to help me generate the RSS feed, though I had to tweak some functions to get it to function as I like it.
</p>
</div>

<div id="outline-container-org0dfde0b" class="outline-3">
<h3 id="org0dfde0b"><code>my/format-rss-feed-entry</code></h3>
<div class="outline-text-3" id="text-org0dfde0b">
<p>
This function generates an RSS entry in an intermediate <code>rss.org</code> file.
It functions by sanitizing the text of the blog post to a useful RSS description and inserting that in an Org Mode entry with the appropriate properties.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span class="org-keyword">defun</span> <span class="org-function-name">my/format-rss-feed-entry</span> (entry style project)
  <span class="org-doc">"Format ENTRY for the RSS feed.</span>
<span class="org-doc">ENTRY is a file name.  STYLE is either 'list' or 'tree'.</span>
<span class="org-doc">PROJECT is the current project."</span>
  (<span class="org-keyword">cond</span> ((not (directory-name-p entry))
         (<span class="org-keyword">let*</span> ((file (org-publish--expand-file-name entry project))
                (title (org-publish-find-title entry project))
                (date (format-time-string
                       <span class="org-string">"%Y-%m-%d"</span>
                       (org-publish-find-date entry project)))
                (link (concat (file-name-sans-extension entry) <span class="org-string">".html"</span>))
                (text
                 (<span class="org-keyword">with-temp-buffer</span>
                   (insert-file-contents file)
                   <span class="org-comment-delimiter">; </span><span class="org-comment">remove kewords and comments</span>
                   <span class="org-comment-delimiter">; </span><span class="org-comment">remove everything after first heading</span>
                   (shell-command-on-region
                    (point-min)
                    (point-max)
                    <span class="org-string">"sed -n -e '/^[[:space:]]*#/d' -e '1,/^*/p'"</span>
                    nil
                    t)
                   <span class="org-comment-delimiter">; </span><span class="org-comment">remove first heading</span>
                   (shell-command-on-region
                    (point-min)
                    (point-max)
                    <span class="org-string">"sed '/^\\*/d'"</span>
                    nil
                    t)
                   (string-trim (buffer-string)))))
           (<span class="org-keyword">with-temp-buffer</span>
             (org-mode) <span class="org-comment-delimiter">; </span><span class="org-comment">need to call `</span><span class="org-comment"><span class="org-constant">org-set-property</span></span><span class="org-comment">'</span>
             (insert (format <span class="org-string">"* [[file:%s][%s]]\n"</span> file title))
             (org-set-property <span class="org-string">"RSS_PERMALINK"</span> link)
             (org-set-property <span class="org-string">"RSS_TITLE"</span> title)
             (org-set-property <span class="org-string">"PUBDATE"</span> date)
             (goto-char (point-max))
             (insert text)
             (buffer-string))))
        ((eq style 'tree)
         <span class="org-comment-delimiter">;; </span><span class="org-comment">Return only last subdir.</span>
         (file-name-nondirectory (directory-file-name entry)))
        (t entry)))
</pre>
</div>


<p>
The most notable change here is that I significantly sanitize the text of the region with the <code>shell-command-on-region</code> directives.
I make sure only the text of the article before the first heading (the introduction) remains in the RSS description, and that no keywords (such as <code>#+SUBTITLE</code>) remain that might sully the output.
</p>
</div>
</div>

<div id="outline-container-org6af36a1" class="outline-3">
<h3 id="org6af36a1">Project</h3>
<div class="outline-text-3" id="text-org6af36a1">
<p>
The final entry in <code>org-publish-project-alist</code> looks something like this:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(list <span class="org-string">"davisrichard437.github.io:rss"</span>
      <span class="org-builtin">:base-directory</span> <span class="org-string">"./content/en/blog"</span>
      <span class="org-builtin">:base-extension</span> <span class="org-string">"org"</span>
      <span class="org-builtin">:recursive</span> nil
      <span class="org-builtin">:exclude</span> (regexp-opt '(<span class="org-string">"rss.org"</span> <span class="org-string">"index.org"</span> <span class="org-string">"404.org"</span>))
      <span class="org-builtin">:publishing-function</span> 'my/org-rss-publish-to-rss
      <span class="org-builtin">:publishing-directory</span> <span class="org-string">"./public/en/blog"</span>
      <span class="org-builtin">:rss-extension</span> <span class="org-string">"xml"</span>
      <span class="org-builtin">:html-link-home</span> <span class="org-string">"https://richarddavis.xyz/en/blog/"</span>
      <span class="org-builtin">:html-link-use-abs-url</span> t
      <span class="org-builtin">:html-link-org-files-as-html</span> t
      <span class="org-builtin">:auto-sitemap</span> t
      <span class="org-builtin">:sitemap-filename</span> <span class="org-string">"rss.org"</span>
      <span class="org-builtin">:sitemap-title</span> <span class="org-string">"Richard Davis, Composer"</span>
      <span class="org-builtin">:sitemap-style</span> 'list
      <span class="org-builtin">:sitemap-sort-files</span> 'anti-chronologically
      <span class="org-builtin">:sitemap-function</span> #'my/format-rss-feed
      <span class="org-builtin">:sitemap-format-entry</span> #'my/format-rss-feed-entry)
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org8011479" class="outline-2">
<h2 id="org8011479">Blog landing page</h2>
<div class="outline-text-2" id="text-org8011479">
<p>
The above does a great job to generate an RSS feed, but I also want to generate a landing page where the blog entries are that can be accessible to the rest of the site.
This turned out to be a very similar process to the RSS feed, with only a few tweaks necessary to change the formatting as I wish.
The entry in <code>org-publish-project-alist</code> is similar, with only a few details changed.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(list <span class="org-string">"davisrichard437.github.io:blog"</span>
      <span class="org-builtin">:base-directory</span> <span class="org-string">"./content/en/blog"</span>
      <span class="org-builtin">:base-extension</span> <span class="org-string">"org"</span>
      <span class="org-builtin">:publishing-directory</span> <span class="org-string">"./public/en/blog"</span>
      <span class="org-builtin">:recursive</span> nil
      <span class="org-builtin">:exclude</span> (regexp-opt '(<span class="org-string">"rss.org"</span>))
      <span class="org-builtin">:html-link-home</span> <span class="org-string">"https://richarddavis.xyz/en/blog/"</span>
      <span class="org-builtin">:html-link-use-abs-url</span> t
      <span class="org-builtin">:html-link-org-files-as-html</span> t
      <span class="org-builtin">:auto-sitemap</span> t
      <span class="org-builtin">:sitemap-filename</span> <span class="org-string">"index.org"</span>
      <span class="org-builtin">:sitemap-title</span> <span class="org-string">"Richard Davis, Composer"</span>
      <span class="org-builtin">:sitemap-style</span> 'list
      <span class="org-builtin">:sitemap-format-entry</span> #'my/format-sitemap-entry
      <span class="org-builtin">:sitemap-function</span> #'my/format-sitemap
      <span class="org-builtin">:sitemap-sort-files</span> 'anti-chronologically
      <span class="org-builtin">:sitemap-file-entry-format</span> <span class="org-string">"%t (%d)"</span>)
</pre>
</div>

<p>
Notably, the format functions have changed from the RSS project as the formatting needs have changed.
</p>
</div>

<div id="outline-container-orgb921df2" class="outline-3">
<h3 id="orgb921df2"><code>my/format-sitemap-entry</code></h3>
<div class="outline-text-3" id="text-orgb921df2">
<p>
This function takes a single file within the <code>davisrichard437.github.io:blog</code> project (a single blog post) and transforms it into an unordered list entry.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span class="org-keyword">defun</span> <span class="org-function-name">my/format-sitemap-entry</span> (file style project)
  <span class="org-doc">"Format ENTRY for the RSS feed.</span>
<span class="org-doc">FILE is a file name.  STYLE is either 'list' or 'tree'.</span>
<span class="org-doc">PROJECT is the current project."</span>
  (<span class="org-keyword">let</span> ((path (org-publish--expand-file-name file project))
        (title (org-publish-find-title file project))
        (date (format-time-string <span class="org-string">"%Y-%m-%d"</span>
                                  (org-publish-find-date file project))))
    (format <span class="org-string">"- [[file:%s][%s (%s)]]\n"</span>
            file
            title
            date)))
</pre>
</div>
</div>
</div>

<div id="outline-container-org163b431" class="outline-3">
<h3 id="org163b431"><code>my/format-sitemap</code></h3>
<div class="outline-text-3" id="text-org163b431">
<p>
This function formats the sitemap (in an intermediate file, <code>index.org</code>, that will subsequently be published to HTML) by adding all of the in-buffer settings and preamble text I want.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span class="org-keyword">defun</span> <span class="org-function-name">my/format-sitemap</span> (title list)
  <span class="org-doc">"Generate sitemap, as a string.</span>
<span class="org-doc">TITLE is the title of the RSS feed.  LIST is an internal</span>
<span class="org-doc">representation for the files to include, as returned by</span>
<span class="org-doc">`</span><span class="org-doc"><span class="org-constant">org-list-to-lisp</span></span><span class="org-doc">'."</span>
  (concat <span class="org-string">"#+TITLE: "</span> title <span class="org-string">"\n"</span>
          <span class="org-string">"#+SUBTITLE: Blog\n"</span>
          <span class="org-string">"#+AUTHOR: "</span> user-full-name <span class="org-string">"\n"</span>
          <span class="org-string">"#+SETUPFILE: ../../../common/theme-readtheorg.setup\n\n"</span>
          <span class="org-string">"#+INCLUDE: ../../../common/header-en.org\n\n"</span>
          <span class="org-string">"Subscribe to the RSS feed [[file:./rss.xml][here]]!\n\n"</span>
          (org-list-to-subtree list 1 '(<span class="org-builtin">:icount</span> <span class="org-string">""</span> <span class="org-builtin">:istart</span> <span class="org-string">""</span>))))
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org3440c7a" class="outline-2">
<h2 id="org3440c7a">Quality of life</h2>
<div class="outline-text-2" id="text-org3440c7a">
<p>
Beyond the above, I have made a few quality of life improvements that help me develop the site better.
</p>
</div>

<div id="outline-container-orgaa59ccb" class="outline-3">
<h3 id="orgaa59ccb">Publish script</h3>
<div class="outline-text-3" id="text-orgaa59ccb">
<p>
The <code>publish.el</code> file at the root of the repository is itself a script, that defines Emacs as its interpreter with a shebang, as follows:
</p>

<div class="org-src-container">
<pre class="src src-text">#!/usr/bin/env -S emacs -Q --script
</pre>
</div>

<p>
This means the file can be run in any interactive shell like any other script.
</p>

<div class="org-src-container">
<pre class="src src-shell">./publish.el
</pre>
</div>

<p>
Another major advantage this offers is that it ensures the script can run on its own, without contamination from a local Emacs configuration.
This is essential for it to be able to run via a GitHub Action.
</p>
</div>
</div>

<div id="outline-container-org9e393da" class="outline-3">
<h3 id="org9e393da">Local development</h3>
<div class="outline-text-3" id="text-org9e393da">
<p>
One thing I found when doing local development is that <code>org-publish</code> will not remove published files if their source file has been removed.
This can make it a little challenging to know what will actually show when I push the repository.
Thus, before running <code>org-publish-all</code>, I make sure to delete the <code>public</code> directory:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(delete-directory <span class="org-string">"./public"</span> t)
</pre>
</div>

<p>
The intermediate files for the RSS feed and the sitemap can also get in the way, so I remove those too:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span class="org-keyword">setq</span> regen-files '(<span class="org-string">"content/en/blog/index.org"</span>
                    <span class="org-string">"content/en/blog/rss.org"</span>))

(<span class="org-keyword">dolist</span> (f regen-files)
  (delete-file f))
</pre>
</div>

<p>
This way I have a clean repository before publishing.
</p>
</div>
</div>

<div id="outline-container-orgd4f2270" class="outline-3">
<h3 id="orgd4f2270"><code>simple-httpd</code></h3>
<div class="outline-text-3" id="text-orgd4f2270">
<p>
I like to use the <a href="https://github.com/snadjperge/simple-httpd"><code>simple-httpd</code></a> package to test the website as I build it.
Once it's installed, I publish the site once and run <code>M-x httpd-serve-directory RET path/to/public</code>.
I can then access the site from my web browser of choice by navigating to <a href="http://0.0.0.0:8080">http://0.0.0.0:8080</a>, or whatever URL shows up in the message buffer.
When I'm done I can run <code>M-x httpd-stop</code>.
</p>
</div>
</div>
</div>

<div id="outline-container-org8260bc5" class="outline-2">
<h2 id="org8260bc5">Conclusion</h2>
<div class="outline-text-2" id="text-org8260bc5">
<p>
Emacs is pretty cool!
This setup works pretty well for me and it makes it much easier for me to maintain a website.
All I need at this point is to figure out how to get a good mono-space font for code examples.
</p>

<p>
You can access the source for this website <a href="https://github.com/davisrichard437/davisrichard437.github.io">here</a>.
Comments, suggestions, questions, etc. are always welcome at <a href="mailto:davisrichard437@gmail.com">davisrichard437@gmail.com</a>!
</p>

<div class="org-center">
<p>
<a href="https://craftering.systemcrafters.net/@davisrichard437/previous">←</a> <a href="https://craftering.systemcrafters.net">Craftering</a> <a href="https://craftering.systemcrafters.net/@davisrichard437/next">→</a>
</p>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="copyright">© Richard Davis, 2024-04-29 Mon 06:07</p>
</div>
</body>
</html>
